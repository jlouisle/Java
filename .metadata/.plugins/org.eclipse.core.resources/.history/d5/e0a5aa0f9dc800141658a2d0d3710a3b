package view;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Toolkit;
import java.util.List;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextField;

import model.Animal;
import controller.Area;

public class AreaView implements Updateable {

	private JFrame frame;
	private Area controller;
	private int maxScreenSize;
	private JTextField elapsedTimeField = new JTextField("Put some very long text here. You know, as in lots of characters.");
	private JTextField numberOfAnimalsField = new JTextField("Put some very long text here. You know, as in lots of characters.");


	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					AreaView window = new AreaView();
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public AreaView() {
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		double width = screenSize.getWidth();
		double height = screenSize.getHeight();
		maxScreenSize = ((width < height) ? (int)width : (int)height)- 50;
		controller = new Area(this, maxScreenSize);
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private synchronized  void initialize() {
		frame = new JFrame();
		frame.setBounds(0, 0, (int) ((maxScreenSize)*1.2), maxScreenSize);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setLayout(new BorderLayout());
		JPanel grapicsView = new AreaPanel();
		frame.add(grapicsView, BorderLayout.CENTER);
		
		// Create timer
		JPanel statisticsPanel = new JPanel();
		statisticsPanel.setLayout(new BorderLayout());
		JPanel timePanel = new JPanel();
		timePanel.add(elapsedTimeField);
		statisticsPanel.add(timePanel, BorderLayout.SOUTH);
		
		// Create number of animals
		JPanel numberAnimalsPanel = new JPanel();
		numberAnimalsPanel.add(numberOfAnimalsField);
		statisticsPanel.add(numberAnimalsPanel, BorderLayout.NORTH);
		frame.add(statisticsPanel, BorderLayout.EAST);
		
		frame.setVisible(true);
	}

	@SuppressWarnings("serial")
	private class AreaPanel extends JPanel {
		
		@Override
		public void paint(Graphics g) {
			List<Animal> animals = AreaView.this.controller.getAnimals();
			long screenScalingFactor = (long) (getScreenScalingFactor() == 0? 1 : getScreenScalingFactor());
			for (Animal animal: animals) {
				if (animal.getClass() != Rabbit)
				int x = (int) (animal.getLocation().getX() / screenScalingFactor);
				int y = (int) (animal.getLocation().getY() / screenScalingFactor);
				drawRabbit(g, x,y,animal.getDrawingColor());
			}
			for (Animal animal: animals) {
				int x = (int) (animal.getLocation().getX() / screenScalingFactor);
				int y = (int) (animal.getLocation().getY() / screenScalingFactor);
				drawRabbit(g, x,y,animal.getDrawingColor());
			}
			setElapsedTime();
			setNumberOfAnimals();
		}
		
		private long getScreenScalingFactor() {
			return (controller.getSize().getX() / AreaView.this.maxScreenSize);
		}

		private void drawRabbit(Graphics g, int x, int y, Color drawingColor) {
			g.setColor(drawingColor);
			g.fillOval(x,  y,  5,  5);
		}
		private void drawFox(Graphics g, int x, int y, Color drawingColor) {
			g.setColor(drawingColor);
			g.fillOval(x,  y,  5,  5);
		}
	}
	
	private void setElapsedTime() {
		long elapsedDays = controller.elapsedDays();
		long years = elapsedDays / 365;
		long days = elapsedDays % 365;
		elapsedTimeField.setText("Years: " + String.valueOf(years) + " Days: " + String.valueOf(days));
	}
	
	private void setNumberOfAnimals() {
		long numberOfAnimals = controller.getAnimals().size();
		numberOfAnimalsField.setText("Number of animals alive: " + String.valueOf(numberOfAnimals));
	}
	

	@Override
	public synchronized void update() {
		frame.repaint();
	}
}
