package model.fox2;

import java.awt.Color;
import java.util.concurrent.BrokenBarrierException;
import java.util.concurrent.CyclicBarrier;

import model.Animal;
import model.Constants;
import model.Location;
import controller.Area;

public class Rabbit extends Animal {

	public Rabbit(Area area, CyclicBarrier synchronizationBarrier, Location startLocation) {
		super(area, synchronizationBarrier, startLocation, (Math.random()> 0.5 ? Animal.Gender.MALE :  Animal.Gender.FEMALE), Color.RED, new RabbitBehaviour(area));
	}

	@Override
	public void live() {
		int numberOfIterations = 0;
		while (isAlive) {
			try {
				Thread.sleep(Constants.WAITING_TIME);
				move();
				numberOfIterations++;
				while ((numberOfIterations * Constants.ITERATION_SPEED / Constants.NUMBER_OF_SECONDS_PER_DAY) >= 1) {
					age();
					numberOfIterations -= Constants.NUMBER_OF_SECONDS_PER_DAY / Constants.ITERATION_SPEED;
				}
				synchronizationBarrier.await();
			} catch (InterruptedException | BrokenBarrierException e) {
				e.printStackTrace();
			}
		}
	}

	@Override
	public void die() {
		isAlive = false;
		getArea().remove(this);
	}

	@Override
	public void reproduce(Animal partner) {
		Animal[] animals = behaviour.reproduce(partner);
		Area area = getArea();
		for (Animal animal: animals) {
			area.add(animal);
		}
	}

	@Override
	public void move() {
		behaviour.move();
	}

	@Override
	public int getMaxAge() {
		return behaviour.getMaxAge();
	}
}
